1 . Trie implementation ( I & II )


class Node{

    boolean isEnd;  
    Node children[];
    int count;
    Node(){        

        this.isEnd = false;
        this.children = new Node[26];
        this.count =0;
    }
}
public class Trie {

    Node root ;
    public Trie() {
        // Write your code here.
        this.root = new Node();
    }

    public void insert(String word) {
        // Write your code here.
        Node cur = root;
        for (int i =0;i<word.length();i++){

            int idx = word.charAt(i) - 'a';

            if (cur.children[idx] == null){

                cur.children[idx] = new Node();
                cur.children[idx].count +=1;
            }
            else{
                cur.children[idx].count +=1;
            }
            cur = cur.children[idx];
        }
        //cur.count +=1;
        cur.isEnd = true;
    }

    public int countWordsEqualTo(String word) {
        // Write your code here.

        Node cur = root;
        for (int i =0 ;i<word.length();i++){

            int idx = word.charAt(i) - 'a';

            if (cur.children[idx] == null) return 0;

            cur = cur.children[idx];
        }
        if (cur.isEnd == true) return cur.count;
        return 0;
    }

    public int countWordsStartingWith(String prefix) {
        // Write your code here.

         Node cur = root;

        for(int i =0 ;i < prefix.length();i++){

            int idx = prefix.charAt(i) - 'a';

            if (cur.children[idx] == null) return 0;

            cur = cur.children[idx];
        }

        return cur.count;
    }

    public void erase(String word) {
        // Write your code here.
        if (search(word) == false){
            System.out.println("no word");
            return;
        } 
        Node cur = root;
        
        for (int i =0 ;i < word.length() ;i++){

            int idx = word.charAt(i) - 'a';

            if (cur.children[idx] == null) return;
            
            cur.children[idx].count--;

            cur = cur.children[idx];
        }

        //cur.count -=1;
        if (cur.count != 0) return;
        cur.isEnd = false;
        return;
    }

    public boolean search(String word) {
        //Write your code here
        Node cur = root;
        for (int i =0 ;i<word.length();i++){

            int idx = word.charAt(i) - 'a';

            if (cur.children[idx] == null) return false;

            cur = cur.children[idx];
        }
        return cur.isEnd;
    }

}


day 3 :

topic : dynamic programming I

1.max product

class Solution {
    public int maxProduct(int[] nums) {

        int maxi_prod = nums[0];

        int imin = nums[0];
        int imax = nums[0];

        for (int i =1 ; i< nums.length;i++){

                if (nums[i] < 0){

                    int temp = imin;
                    imin = imax;
                    imax = temp;
                }  

                imax = Math.max(nums[i] , imax*nums[i]);
                imin = Math.min(nums[i] , imin * nums[i]);
                maxi_prod = Math.max(maxi_prod , imax);


        }
        return maxi_prod;
        
    }
}

2.maximum sum increasing subsequence

class Solution
{
    public int recur (int curInd , int prevInd , int n ,int arr[] ,int dp[][]){
        
        if (curInd < n ){
            
        if (dp[curInd+1][prevInd+1]  != -1) return dp[curInd+1][prevInd+1];
        
        int take =0;
        
        int notTake = 0 + recur (curInd+1 , prevInd , n , arr ,dp);
        
        if (prevInd == -1 || arr[curInd] > arr[prevInd] ){
            
            take = arr[curInd] + recur (curInd+1 , curInd , n , arr ,dp);
        }
        
        return dp[curInd+1][prevInd+1] = Math.max(take , notTake);
        }
       
       return 0;
       
    }
	public int maxSumIS(int arr[], int n)  
	{  
	    //code here.
	    //int n = arr.length;
	    int dp[][] = new int[n+1][n+1];
	    
	    for (int num[] : dp){
	        
	        Arrays.fill(num ,-1);
	    }
	    return recur (0 , -1 , n , arr ,dp);
	}  
}

3.MCM

public static int recur (int start , int end ,int arr[],int dp[][] ){

		if (start == end) return 0;
		
		if (dp[start][end] != -1) return dp[start][end];
		int mini = Integer.MAX_VALUE;

		for (int k = start ; k<end;k++ ){

				int ans = arr[start-1] * arr[k] *arr[end] + recur (start ,k,arr,dp ) +recur(k+1,end,arr,dp);

				mini = Math.min(mini ,ans);
		}
		return dp[start][end] = mini;
	}
	public static int matrixMultiplication(int[] arr , int N) {
		
		int dp[][] = new int[N][N];
		for (int num[]: dp){

			Arrays.fill(num , -1);
		}
		return recur (1 , N-1 ,arr ,dp);
	}
}

4.Rod cutting problem

public class Solution {

	public static int recur (int cutSize , int totlen ,int price[],int dp[][] ){

			if (totlen <= 0 || cutSize <=0) return 0;

			if (dp[cutSize][totlen] != -1) return dp[cutSize][totlen];
			int take =0;

			int notTake = 0 + recur (cutSize-1 , totlen , price ,dp);

			if (totlen >= cutSize){

				take = price[cutSize-1] + recur (cutSize , totlen-cutSize , price ,dp);
			}

			return dp[cutSize][totlen] = Math.max(take , notTake);
	}
	public static int cutRod(int price[], int n) {
		// Write your code here.

		int dpp[][] = new int[n+1][n+1];
		for (int num[]: dpp){

			Arrays.fill(num , -1);
		}
		return recur (n,n , price ,dpp);
	}
}


